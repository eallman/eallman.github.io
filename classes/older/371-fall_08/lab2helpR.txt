# Helpful R commands

read.table('Students20.dat')                # reads table from file 
ls()                                        # lists variable names
Students20<-read.table('Students20.dat')    # reads table from file and stores it to variable Students20

ls()
Students20
attach(Students20)                          # attaches the three variables (colds, GPA, rent)

hist(colds,seq(-.5,5.5,1),prob=TRUE)        # relative frequency histogram of colds


# Getting the probability function for a discrete random variable
# or the density function for a continuous random variable

# Discrete random variables first
probBinom<-dbinom(0:10,10,.2)
probGeom<-dgeom(0:10,.2)
probPois<-dpois(0:10,5)
# similar commands for dhyper and dnbinom.  Use help(dhyper), etc.

# some plotting commands for densities
plot(0:10,probBinom,col="red",pch=19)
lines(0:10,probBinom,col="red")

# Continuous random variables
#
# Uniform distribution
densityUnif<-dunif(0:10,min=0,max=10)
plot(0:10,densityUnif)
lines(densityUnif)
# Normal distribution
densityNorm<-dnorm(-10:10,1,3)   # 1 is mean, 3 is std
plot(-10:10,densityNorm)
lines(densityNorm)
# Gamma, Beta, similarly.  See help.

# An example:
#   Consider the data which I think comes from 
#   a geometric distribution with P(S) = p = .2
testData<-c(4,7,6,0,7,3,9,2,3,0,2,1,5,5,0,2,0,4,8,4)

hist(testData,seq(0,20,1),prob=TRUE)    # plot a relative frequency histogram
lines(density(testData))                # add a `smoothing density curve'
x=seq(0,19)                             # get a vector of x values
y=dgeom(x,.2)                           # get the corresponding values of the probability function for 
                                        #     a geometric random variable with p = .2
lines(x,y,col='red')                    # connects points with coordinates (x,y) with red lines.  
                                        # Then compare.

# Load the data for the problem on gene frequencies.
geneA<-read.table('geneA.dat')
attach(geneA)
A10<-A10[1:10]
A50<-A50[1:50]
A100<-A100[1:100]
A500<-A500[1:500]
A5000<-A5000[1:5000]

geneB<-read.table('geneB.dat')
attach(geneB)
B10<-B10[1:10]
B50<-B50[1:50]
B100<-B100[1:100]
B500<-B500[1:500]
B5000<-B5000[1:5000]
# end command to load the gene frequency data

# Other useful commands
# See Lab 1.  
# In addition,
mean(A100)
sd(A100)             # standard deviation
fivenum(GPA)         # Tukey's five number summary
summary(GPA)         # summary statistics
sqrt(5000)